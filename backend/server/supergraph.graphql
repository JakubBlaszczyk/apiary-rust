schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Account
  @join__owner(graph: ACCOUNT)
  @join__type(graph: ACCOUNT, key: "id")
{
  email: String! @join__field(graph: ACCOUNT)
  id: UUID! @join__field(graph: ACCOUNT)
  login: String! @join__field(graph: ACCOUNT)
  password: String! @join__field(graph: ACCOUNT)
  privileges: String! @join__field(graph: ACCOUNT)
}

type AccountApiary
  @join__owner(graph: ACCOUNT_APIARY)
  @join__type(graph: ACCOUNT_APIARY, key: "idAccount idApiary")
{
  idAccount: UUID! @join__field(graph: ACCOUNT_APIARY)
  idApiary: Int! @join__field(graph: ACCOUNT_APIARY)
}

type Apiary
  @join__owner(graph: APIARY)
  @join__type(graph: APIARY, key: "id")
{
  id: Int! @join__field(graph: APIARY)
  information: String @join__field(graph: APIARY)
  localization: String @join__field(graph: APIARY)
}

type Event
  @join__owner(graph: EVENT)
  @join__type(graph: EVENT, key: "id")
{
  id: Int! @join__field(graph: EVENT)
  idApiary: Int! @join__field(graph: EVENT)
  note: String @join__field(graph: EVENT)
  timeEnd: NaiveDateTime @join__field(graph: EVENT)
  timeStart: NaiveDateTime @join__field(graph: EVENT)
}

type Mutation {
  createAccount(email: String!, login: String!, password: String!, privileges: String): Account! @join__field(graph: ACCOUNT)
  createAccountApiary(idAccount: String!, idApiary: Int!): AccountApiary! @join__field(graph: ACCOUNT_APIARY)
  createApiary(information: String, localization: String): Apiary! @join__field(graph: APIARY)
  createEvent(idApiary: Int!, note: String, timeStart: NaiveDateTime): Event! @join__field(graph: EVENT)
  deleteAccount(id: ID!): Boolean! @join__field(graph: ACCOUNT)
  deleteAccountApiary(idAccount: String!, idApiary: Int!): Boolean! @join__field(graph: ACCOUNT_APIARY)
  deleteApiary(id: ID!): Boolean! @join__field(graph: APIARY)
  deleteEvent(id: ID!): Boolean! @join__field(graph: EVENT)
  updateAccount(email: String, id: ID!, login: String, password: String): Account! @join__field(graph: ACCOUNT)
  updateApiary(id: ID!, information: String, localization: String): Apiary! @join__field(graph: APIARY)
  updateEvent(id: ID!, idApiary: Int, note: String, timeEnd: NaiveDateTime, timeStart: NaiveDateTime): Event! @join__field(graph: EVENT)
}

"""
ISO 8601 combined date and time without timezone.

# Examples

* `2015-07-01T08:59:60.123`,
"""
scalar NaiveDateTime

type Query {
  account(id: String!): Account! @join__field(graph: ACCOUNT)
  accountApiary(idAccount: String, idApiary: Int): [AccountApiary!]! @join__field(graph: ACCOUNT_APIARY)
  accounts: [Account!]! @join__field(graph: ACCOUNT)
  accountsApiaries: [AccountApiary!]! @join__field(graph: ACCOUNT_APIARY)
  apiaries: [Apiary!]! @join__field(graph: APIARY)
  apiary(id: String!): Apiary! @join__field(graph: APIARY)
  event(id: String!): Event! @join__field(graph: EVENT)
  events: [Event!]! @join__field(graph: EVENT)
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as Strings
within GraphQL. UUIDs are used to assign unique identifiers to entities without requiring a central
allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNT @join__graph(name: "account" url: "http://localhost:8080")
  ACCOUNT_APIARY @join__graph(name: "account_apiary" url: "http://localhost:8083")
  APIARY @join__graph(name: "apiary" url: "http://localhost:8081")
  EVENT @join__graph(name: "event" url: "http://localhost:8082")
}
