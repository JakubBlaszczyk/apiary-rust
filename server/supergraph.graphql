schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Account
  @join__owner(graph: ACCOUNTS)
  @join__type(graph: ACCOUNTS, key: "id")
{
  email: String! @join__field(graph: ACCOUNTS)
  id: UUID! @join__field(graph: ACCOUNTS)
  login: String! @join__field(graph: ACCOUNTS)
  password: String! @join__field(graph: ACCOUNTS)
  privileges: String! @join__field(graph: ACCOUNTS)
}

type Mutation {
  createAccount(email: String!, login: String!, password: String!, privileges: String!): Account! @join__field(graph: ACCOUNTS)
  deleteAccount(id: ID!): Boolean! @join__field(graph: ACCOUNTS)
  doNothing(nothing: String!): String! @join__field(graph: ACCOUNTS)
  updateAccount(email: String, id: ID!, login: String, password: String): Account! @join__field(graph: ACCOUNTS)
}

type Query {
  account(id: String!): Account! @join__field(graph: ACCOUNTS)
  accounts: [Account!]! @join__field(graph: ACCOUNTS)
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as Strings
within GraphQL. UUIDs are used to assign unique identifiers to entities without requiring a central
allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts" url: "http://localhost:8080")
}
